File: app.py
import dash
from dash import dcc, html
import dash_bootstrap_components as dbc
from layout import layout
from callbacks import register_callbacks

# Initialize Dash app with a modern Bootstrap theme
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.FLATLY])

# Set the app layout
app.layout = layout

# Register callbacks
register_callbacks(app)

if __name__ == "__main__":
    app.run_server(debug=True, port=8060)
 # Add a newline between files
File: callbacks.py
from dash import Input, Output
import pandas as pd
import plotly.graph_objects as go
from utils import COLORS

# Load and preprocess data
df = pd.read_csv("./data/data.csv", low_memory=False)
df["created_at"] = pd.to_datetime(df["created_at"])

def register_callbacks(app):
    @app.callback(
        [
            Output("sales-trend-chart", "figure"),
            Output("category-sales-chart", "figure"),
            Output("payment-method-chart", "figure"),
            Output("total-sales", "children"),
            Output("total-orders", "children"),
            Output("avg-order-value", "children"),
        ],
        [
            Input("date-range", "start_date"),
            Input("date-range", "end_date"),
            Input("order-status", "value"),
        ]
    )
    def update_dashboard(start_date, end_date, order_status):
        # Filter data
        filtered_df = df[
            (df["created_at"] >= start_date) &
            (df["created_at"] <= end_date) &
            (df["order_status"].isin(order_status))
        ]

        # Sales trend chart
        trend_data = filtered_df.groupby(pd.Grouper(key="created_at", freq='D'))["grand_total"].sum().reset_index()

        sales_trend_fig = go.Figure()
        sales_trend_fig.add_trace(go.Scatter(
            x=trend_data["created_at"],
            y=trend_data["grand_total"],
            mode='lines',
            fill='tonexty',
            line=dict(color=COLORS['secondary']),
            name='Sales'
        ))
        sales_trend_fig.update_layout(
            title="Daily Sales Trend",
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            hovermode='x unified',
            margin=dict(l=0, r=0, t=40, b=0),
            yaxis=dict(gridcolor='rgba(0,0,0,0.1)', zerolinecolor='rgba(0,0,0,0.1)'),
            xaxis=dict(gridcolor='rgba(0,0,0,0.1)', zerolinecolor='rgba(0,0,0,0.1)'),
        )

        # Category sales chart
        category_data = filtered_df.groupby("product_category")["grand_total"].sum().sort_values(ascending=True).reset_index()

        category_sales_fig = go.Figure()
        category_sales_fig.add_trace(go.Bar(
            x=category_data["grand_total"],
            y=category_data["product_category"],
            orientation='h',
            marker_color=COLORS['secondary'],
        ))
        category_sales_fig.update_layout(
            title="Sales by Category",
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            margin=dict(l=0, r=0, t=40, b=0),
            yaxis=dict(gridcolor='rgba(0,0,0,0.1)', zerolinecolor='rgba(0,0,0,0.1)'),
            xaxis=dict(gridcolor='rgba(0,0,0,0.1)', zerolinecolor='rgba(0,0,0,0.1)'),
        )

        # Payment method chart
        payment_data = filtered_df["payment_method"].value_counts().reset_index()
        payment_data.columns = ["payment_method", "count"]

        payment_method_fig = go.Figure(data=[go.Pie(
            labels=payment_data["payment_method"],
            values=payment_data["count"],
            hole=.4,
            marker_colors=COLORS['chart_colors'],
        )])
        payment_method_fig.update_layout(
            title="Payment Methods",
            paper_bgcolor='rgba(0,0,0,0)',
            showlegend=True,
            margin=dict(l=0, r=0, t=40, b=0),
        )

        # Metrics
        total_sales = f"${filtered_df['grand_total'].sum():,.2f}"
        total_orders = f"{filtered_df['item_id'].nunique():,}"
        avg_order_value = f"${filtered_df['grand_total'].mean():,.2f}" if not filtered_df.empty else "$0.00"

        return sales_trend_fig, category_sales_fig, payment_method_fig, total_sales, total_orders, avg_order_value
 # Add a newline between files
File: config.py
# Configuration file (optional)

COLORS = {
    'primary': '#2C3E50',
    'secondary': '#18BC9C',
    'background': '#F8F9FA',
    'text': '#2C3E50',
    'chart_colors': ['#18BC9C', '#3498DB', '#E74C3C', '#F39C12', '#9B59B6']
}
 # Add a newline between files
File: layout.py
from dash import dcc, html
import dash_bootstrap_components as dbc
from utils import generate_metric_card
import pandas as pd

# Load and preprocess data
df = pd.read_csv("./data/data.csv", low_memory=False)
df["created_at"] = pd.to_datetime(df["created_at"])

# Custom color palette
COLORS = {
    'primary': '#2C3E50',
    'secondary': '#18BC9C',
    'background': '#F8F9FA',
    'text': '#2C3E50',
    'chart_colors': ['#18BC9C', '#3498DB', '#E74C3C', '#F39C12', '#9B59B6']
}

# Layout of the app
layout = dbc.Container([
    # Header
    dbc.Row([
        dbc.Col([
            html.H1("E-Commerce Analytics Dashboard",
                    className="display-4 mb-2", style={'color': COLORS['primary']}),
            html.P("Monitor your business performance in real-time",
                   className="lead text-muted")
        ], width=12)
    ], className="mb-4 pt-4"),

    # Filters Section
    dbc.Card([
        dbc.CardBody([
            dbc.Row([
                dbc.Col([
                    html.Label("Date Range", className="fw-bold mb-2",
                               style={'color': COLORS['primary']}),
                    dcc.DatePickerRange(
                        id="date-range",
                        start_date=df["created_at"].min(),
                        end_date=df["created_at"].max(),
                        className="mb-2",
                        style={"zIndex": 1000}
                    ),
                ], xs=12, md=6),

                dbc.Col([
                    html.Label("Order Status", className="fw-bold mb-2",
                               style={'color': COLORS['primary']}),
                    dcc.Dropdown(
                        id="order-status",
                        options=[{"label": status.title(), "value": status}
                                 for status in df["order_status"].unique()],
                        value=df["order_status"].unique(),
                        multi=True,
                        className="mb-2"
                    ),
                ], xs=12, md=6),
            ])
        ])
    ], className="mb-4 shadow-sm"),

    # Metrics Row
    dbc.Row([
        dbc.Col(generate_metric_card("total-sales",
                "Total Sales", "fa-dollar-sign"), xs=12, md=4),
        dbc.Col(generate_metric_card("total-orders",
                "Total Orders", "fa-shopping-cart"), xs=12, md=4),
        dbc.Col(generate_metric_card("avg-order-value",
                "Avg Order Value", "fa-chart-line"), xs=12, md=4),
    ], className="mb-4 g-3"),

    # Charts
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardBody(
                    [dcc.Graph(id="sales-trend-chart", config={'displayModeBar': False})])
            ], className="shadow-sm")
        ], width=12, className="mb-4"),
    ]),

    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardBody(
                    [dcc.Graph(id="category-sales-chart", config={'displayModeBar': False})])
            ], className="shadow-sm h-100")
        ], xs=12, md=6),
        dbc.Col([
            dbc.Card([
                dbc.CardBody(
                    [dcc.Graph(id="payment-method-chart", config={'displayModeBar': False})])
            ], className="shadow-sm h-100")
        ], xs=12, md=6),
    ], className="g-3"),

], fluid=True, style={"backgroundColor": COLORS['background'], "minHeight": "100vh", "padding": "20px"})
 # Add a newline between files
File: main.py
# import dash
# from dash import dcc, html, Input, Output
# import dash_bootstrap_components as dbc
# import plotly.express as px
# import plotly.graph_objects as go
# import pandas as pd
# from datetime import datetime, timedelta

# # Load and preprocess data
# df = pd.read_csv("./sample_data.csv")
# df["created_at"] = pd.to_datetime(df["created_at"])

# # Initialize Dash app with a modern Bootstrap theme
# app = dash.Dash(__name__, external_stylesheets=[dbc.themes.FLATLY])

# # Custom color palette
# COLORS = {
#     'primary': '#2C3E50',
#     'secondary': '#18BC9C',
#     'background': '#F8F9FA',
#     'text': '#2C3E50',
#     'chart_colors': ['#18BC9C', '#3498DB', '#E74C3C', '#F39C12', '#9B59B6']
# }


# def generate_metric_card(id, label, icon):
#     return dbc.Card(
#         dbc.CardBody([
#             html.Div([
#                 html.I(className=f"fas {icon} fa-2x me-2",
#                        style={'color': COLORS['secondary']}),
#                 html.H5(label, className="card-title mb-0")
#             ], className="d-flex align-items-center mb-3"),
#             html.Div(id=id, className="card-text",
#                      style={
#                          "fontSize": "24px",
#                          "fontWeight": "bold",
#                          "color": COLORS['primary']
#                      }),
#         ]),
#         className="shadow-sm h-100",
#         style={"backgroundColor": "white"}
#     )


# # Layout
# app.layout = dbc.Container([
#     # Header
#     dbc.Row([
#         dbc.Col([
#             html.H1("E-Commerce Analytics Dashboard",
#                     className="display-4 mb-2",
#                     style={'color': COLORS['primary']}),
#             html.P("Monitor your business performance in real-time",
#                    className="lead text-muted")
#         ], width=12)
#     ], className="mb-4 pt-4"),

#     # Filters Section
#     dbc.Card([
#         dbc.CardBody([
#             dbc.Row([
#                 dbc.Col([
#                     html.Label("Date Range",
#                                className="fw-bold mb-2",
#                                style={'color': COLORS['primary']}),
#                     dcc.DatePickerRange(
#                         id="date-range",
#                         start_date=df["created_at"].min(),
#                         end_date=df["created_at"].max(),
#                         className="mb-2",
#                         style={"zIndex": 1000}
#                     ),
#                 ], xs=12, md=6),

#                 dbc.Col([
#                     html.Label("Order Status",
#                                className="fw-bold mb-2",
#                                style={'color': COLORS['primary']}),
#                     dcc.Dropdown(
#                         id="order-status",
#                         options=[{"label": status.title(), "value": status}
#                                  for status in df["order_status"].unique()],
#                         value=df["order_status"].unique(),
#                         multi=True,
#                         className="mb-2"
#                     ),
#                 ], xs=12, md=6),
#             ])
#         ])
#     ], className="mb-4 shadow-sm"),

#     # Metrics Row
#     dbc.Row([
#         dbc.Col(generate_metric_card(
#             "total-sales", "Total Sales", "fa-dollar-sign"), xs=12, md=4),
#         dbc.Col(generate_metric_card(
#             "total-orders", "Total Orders", "fa-shopping-cart"), xs=12, md=4),
#         dbc.Col(generate_metric_card(
#             "avg-order-value", "Avg Order Value", "fa-chart-line"), xs=12, md=4),
#     ], className="mb-4 g-3"),

#     # Charts
#     dbc.Row([
#         dbc.Col([
#             dbc.Card([
#                 dbc.CardBody([
#                     dcc.Graph(id="sales-trend-chart",
#                              config={'displayModeBar': False})
#                 ])
#             ], className="shadow-sm")
#         ], width=12, className="mb-4"),
#     ]),

#     dbc.Row([
#         dbc.Col([
#             dbc.Card([
#                 dbc.CardBody([
#                     dcc.Graph(id="category-sales-chart",
#                              config={'displayModeBar': False})
#                 ])
#             ], className="shadow-sm h-100")
#         ], xs=12, md=6),
#         dbc.Col([
#             dbc.Card([
#                 dbc.CardBody([
#                     dcc.Graph(id="payment-method-chart",
#                              config={'displayModeBar': False})
#                 ])
#             ], className="shadow-sm h-100")
#         ], xs=12, md=6),
#     ], className="g-3"),

# ], fluid=True, style={"backgroundColor": COLORS['background'], "minHeight": "100vh", "padding": "20px"})


# @app.callback(
#     [
#         Output("sales-trend-chart", "figure"),
#         Output("category-sales-chart", "figure"),
#         Output("payment-method-chart", "figure"),
#         Output("total-sales", "children"),
#         Output("total-orders", "children"),
#         Output("avg-order-value", "children"),
#     ],
#     [
#         Input("date-range", "start_date"),
#         Input("date-range", "end_date"),
#         Input("order-status", "value"),
#     ]
# )
# def update_dashboard(start_date, end_date, order_status):
#     # Filter data
#     filtered_df = df[
#         (df["created_at"] >= start_date) &
#         (df["created_at"] <= end_date) &
#         (df["order_status"].isin(order_status))
#     ]

#     # Sales trend chart
#     trend_data = filtered_df.groupby(
#         pd.Grouper(key="created_at", freq='D'))["grand_total"].sum().reset_index()

#     sales_trend_fig = go.Figure()
#     sales_trend_fig.add_trace(go.Scatter(
#         x=trend_data["created_at"],
#         y=trend_data["grand_total"],
#         mode='lines',
#         fill='tonexty',
#         line=dict(color=COLORS['secondary']),
#         name='Sales'
#     ))
#     sales_trend_fig.update_layout(
#         title="Daily Sales Trend",
#         paper_bgcolor='rgba(0,0,0,0)',
#         plot_bgcolor='rgba(0,0,0,0)',
#         hovermode='x unified',
#         margin=dict(l=0, r=0, t=40, b=0),
#         yaxis=dict(
#             gridcolor='rgba(0,0,0,0.1)',
#             zerolinecolor='rgba(0,0,0,0.1)',
#         ),
#         xaxis=dict(
#             gridcolor='rgba(0,0,0,0.1)',
#             zerolinecolor='rgba(0,0,0,0.1)',
#         )
#     )

#     # Category sales chart
#     category_data = filtered_df.groupby("product_category")[
#         "grand_total"].sum().sort_values(ascending=True).reset_index()

#     category_sales_fig = go.Figure()
#     category_sales_fig.add_trace(go.Bar(
#         x=category_data["grand_total"],
#         y=category_data["product_category"],
#         orientation='h',
#         marker_color=COLORS['secondary'],
#     ))
#     category_sales_fig.update_layout(
#         title="Sales by Category",
#         paper_bgcolor='rgba(0,0,0,0)',
#         plot_bgcolor='rgba(0,0,0,0)',
#         margin=dict(l=0, r=0, t=40, b=0),
#         yaxis=dict(
#             gridcolor='rgba(0,0,0,0.1)',
#             zerolinecolor='rgba(0,0,0,0.1)',
#         ),
#         xaxis=dict(
#             gridcolor='rgba(0,0,0,0.1)',
#             zerolinecolor='rgba(0,0,0,0.1)',
#         )
#     )

#     # Payment method chart
#     payment_data = filtered_df["payment_method"].value_counts().reset_index()
#     payment_data.columns = ["payment_method", "count"]

#     payment_method_fig = go.Figure(data=[go.Pie(
#         labels=payment_data["payment_method"],
#         values=payment_data["count"],
#         hole=.4,
#         marker_colors=COLORS['chart_colors'],
#     )])
#     payment_method_fig.update_layout(
#         title="Payment Methods",
#         paper_bgcolor='rgba(0,0,0,0)',
#         showlegend=True,
#         margin=dict(l=0, r=0, t=40, b=0),
#     )

#     # Metrics
#     total_sales = f"${filtered_df['grand_total'].sum():,.2f}"
#     total_orders = f"{filtered_df['item_id'].nunique():,}"
#     avg_order_value = f"${filtered_df['grand_total'].mean():,.2f}" if not filtered_df.empty else "$0.00"

#     return sales_trend_fig, category_sales_fig, payment_method_fig, total_sales, total_orders, avg_order_value


# # Add Font Awesome to the app
# app.index_string = '''
# <!DOCTYPE html>
# <html>
#     <head>
#         {%metas%}
#         <title>{%title%}</title>
#         {%favicon%}
#         {%css%}
#         <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
#     </head>
#     <body>
#         {%app_entry%}
#         <footer>
#             {%config%}
#             {%scripts%}
#             {%renderer%}
#         </footer>
#     </body>
# </html>
# '''

# if __name__ == "__main__":
#     app.run_server(debug=True, port=8060)
 # Add a newline between files
File: requirements.txt
blinker==1.9.0
certifi==2024.12.14
charset-normalizer==3.4.1
click==8.1.8
dash==2.18.2
dash-core-components==2.0.0
dash-html-components==2.0.0
dash-table==5.0.0
Flask==3.0.3
idna==3.10
importlib_metadata==8.5.0
itsdangerous==2.2.0
Jinja2==3.1.5
MarkupSafe==3.0.2
nest-asyncio==1.6.0
numpy==2.2.1
packaging==24.2
pandas==2.2.3
plotly==5.24.1
python-dateutil==2.9.0.post0
pytz==2024.2
requests==2.32.3
retrying==1.3.4
six==1.17.0
tenacity==9.0.0
typing_extensions==4.12.2
tzdata==2024.2
urllib3==2.3.0
Werkzeug==3.0.6
zipp==3.21.0
 # Add a newline between files
File: sample_data.csv
item_id,order_status,created_at,stock_keeping_unit,price,qty_ordered,grand_total,increment_id,product_category,sales_commission_code,discount_amount,payment_method,BI Status,market_value,Customer Since,Customer ID
211133,canceled,2016-07-01,kcc_Buy 2 Frey Air Freshener & Get 1 Kasual Body Spray Free,240.0,1,240.0,100147444,Beauty & Grooming,Unknown,0.0,Cash_on_delivery,Gross,240,2016-07-01,2
211134,canceled,2016-07-01,Ego_UP0017-999-MR0,2450.0,1,2450.0,100147445,Women's Fashion,Unknown,0.0,Cash_on_delivery,Gross,2450,2016-07-01,3
211135,completed,2016-07-01,kcc_krone deal,360.0,1,60.0,100147446,Beauty & Grooming,R-FSD-52352,300.0,Cash_on_delivery,Net,360,2016-07-01,4
211136,refund,2016-07-01,BK7010400AG,555.0,2,1110.0,100147447,Soghaat,Unknown,0.0,Cash_on_delivery,Valid,1110,2016-07-01,5
211137,canceled,2016-07-01,UK_Namkino All In One 200 Gms,80.0,1,80.0,100147448,Soghaat,Unknown,0.0,Cash_on_delivery,Gross,80,2016-07-01,6
211138,completed,2016-07-01,kcc_krone deal,360.0,1,60.0,100147449,Beauty & Grooming,Unknown,300.0,Cash_on_delivery,Net,360,2016-07-01,7
211139,completed,2016-07-01,UK_Namkino Mix Nimco 400 Gms,170.0,1,170.0,100147450,Soghaat,Unknown,0.0,Cash_on_delivery,Net,170,2016-07-01,6
211140,canceled,2016-07-01,Apple iPhone 6S 64GB,96499.0,1,96499.0,100147451,Mobiles & Tablets,Unknown,0.0,Bank or Card,Gross,96499,2016-07-01,8
211141,canceled,2016-07-01,Apple iPhone 6S 64GB,96499.0,1,96499.0,100147452,Mobiles & Tablets,Unknown,0.0,Others,Gross,96499,2016-07-01,8
211142,completed,2016-07-01,"GFC_Pedestal Myga Cross Base (Special Guard) 24""",5500.0,1,5500.0,100147453,Appliances,Unknown,0.0,Cash_on_delivery,Net,5500,2016-07-01,9
211143,completed,2016-07-01,BK1070200PL,210.0,1,366.0,100147454,Soghaat,Unknown,0.0,Cash_on_delivery,Valid,210,2016-07-01,10
211144,completed,2016-07-01,BK1130200CF,156.0,1,366.0,100147454,Soghaat,Unknown,0.0,Cash_on_delivery,Valid,156,2016-07-01,10
211145,completed,2016-07-01,kcc_Sultanat,120.0,1,120.0,100147455,Home & Living,105259,0.0,Bank or Card,Net,120,2016-07-01,11
211146,completed,2016-07-01,kcc_glamour deal,320.0,1,0.0,100147456,Beauty & Grooming,Unknown,0.0,Others,Net,320,2016-07-01,12
211147,canceled,2016-07-01,Assetmen_MD-346-M,1550.0,1,1550.0,100147457,Men's Fashion,105259,0.0,Bank or Card,Gross,1550,2016-07-01,11
211149,completed,2016-07-01,cr_DATES WITH CASHEW-400 GM,420.0,1,1270.0,100147458,Soghaat,R-KHW-104406,0.0,Cash_on_delivery,Net,420,2016-07-01,13
211150,completed,2016-07-01,UK_Gift Box Mix Dry Fruit Sweets 500 Gms,360.0,1,1270.0,100147458,Soghaat,R-KHW-104406,0.0,Cash_on_delivery,Net,360,2016-07-01,13
211151,completed,2016-07-01,itter_AB 1199,490.0,1,1270.0,100147458,Beauty & Grooming,R-KHW-104406,0.0,Cash_on_delivery,Net,490,2016-07-01,13
211152,canceled,2016-07-01,RL_B005,899.25,1,2118.25,100147459,Home & Living,Unknown,0.0,Cash_on_delivery,Gross,899,2016-07-01,14
211153,canceled,2016-07-01,bed&rest_S7,899.0,1,2118.25,100147459,Home & Living,Unknown,0.0,Cash_on_delivery,Gross,899,2016-07-01,14
211154,canceled,2016-07-01,L&L_LLHLE8224S,320.0,1,2118.25,100147459,Home & Living,Unknown,0.0,Cash_on_delivery,Gross,320,2016-07-01,14
211155,completed,2016-07-01,J&J_JJR-4,149.0,1,298.0,100147460,Kids & Baby,Unknown,0.0,Cash_on_delivery,Net,149,2016-07-01,15
211156,completed,2016-07-01,J&J_JJR-20,149.0,1,298.0,100147460,Kids & Baby,Unknown,0.0,Cash_on_delivery,Net,149,2016-07-01,15
211157,refund,2016-07-01,D Lend a Helping Hand,1000.0,1,0.0,100147461,Others,Unknown,0.0,Others,Valid,1000,2016-07-01,16
211158,refund,2016-07-01,Mochika_M0001112-12,1913.0,1,3826.0,100147462,Men's Fashion,Unknown,0.0,Cash_on_delivery,Valid,1913,2016-07-01,17
211160,refund,2016-07-01,Mochika_M0001112-8,1913.0,1,3826.0,100147462,Men's Fashion,Unknown,0.0,Cash_on_delivery,Valid,1913,2016-07-01,17
211162,completed,2016-07-01,SKMT_Blood Test,500.0,1,0.0,100147463,Others,Unknown,0.0,Others,Net,500,2016-07-01,16
211163,completed,2016-07-01,SKMT_Medicine,100.0,5,0.0,100147463,Others,Unknown,0.0,Others,Net,500,2016-07-01,16
211164,canceled,2016-07-01,sputnik_701/5-11,1500.0,2,3000.0,100147464,Men's Fashion,Unknown,0.0,Cash_on_delivery,Gross,3000,2016-07-01,18
211166,completed,2016-07-01,Ctees-Black Zip- Up Hoodie-XL,450.0,1,450.0,100147465,Kids & Baby,Unknown,0.0,Cash_on_delivery,Net,450,2016-07-01,19
211168,completed,2016-07-01,Samsung Galaxy J5,20999.0,1,20999.0,100147466,Mobiles & Tablets,R-FSD-58130,0.0,Cash_on_delivery,Net,20999,2016-07-01,20
211169,completed,2016-07-01,kcc_krone deal,360.0,1,360.0,100147467,Beauty & Grooming,R-FSD-58130,0.0,Cash_on_delivery,Net,360,2016-07-01,20
211170,refund,2016-07-01,Veet_4,165.0,1,300.0,100147468,Beauty & Grooming,Unknown,82.5,Cash_on_delivery,Valid,165,2016-07-01,21
211171,refund,2016-07-01,RS_Gulab jaman Tin,435.0,1,300.0,100147468,Soghaat,Unknown,217.5,Cash_on_delivery,Valid,435,2016-07-01,21
211172,canceled,2016-07-01,cr_PEANUT SALTY-200 GM,90.0,1,940.0,100147469,Soghaat,Unknown,0.0,Cash_on_delivery,Gross,90,2016-07-01,22
211173,canceled,2016-07-01,Oriflame_21557,850.0,1,940.0,100147469,Beauty & Grooming,Unknown,0.0,Cash_on_delivery,Gross,850,2016-07-01,22
211174,completed,2016-07-01,JBS_TAT-128,3672.0,1,3672.0,100147470,Home & Living,Unknown,0.0,Cash_on_delivery,Net,3672,2016-07-01,23
211175,completed,2016-07-01,cr_PEANUT SALTY-200 GM,90.0,1,740.0,100147471,Soghaat,Unknown,19.15,Cash_on_delivery,Net,90,2016-07-01,22
211176,completed,2016-07-01,Oriflame_21557,850.0,1,740.0,100147471,Beauty & Grooming,Unknown,180.85,Cash_on_delivery,Net,850,2016-07-01,22
211177,refund,2016-07-01,Ajmery_BRR-590-M,899.0,1,899.0,100147472,Men's Fashion,Unknown,0.0,Cash_on_delivery,Valid,899,2016-07-01,24
211179,canceled,2016-07-01,HOS_GUCFW75,7400.0,1,11000.0,100147473,Beauty & Grooming,Unknown,0.0,Others,Gross,7400,2016-07-01,25

File: testing.ipynb
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Read the Excel file\n",
    "df_excel = pd.read_excel(\"./preprocessed_data.xlsx\")\n",
    "\n",
    "# Save it as a CSV file\n",
    "df_excel.to_csv(\"./data.csv\", index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import dash\n",
    "from dash import dcc, html, Input, Output\n",
    "import plotly.express as px\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>order_status</th>\n",
       "      <th>created_at</th>\n",
       "      <th>stock_keeping_unit</th>\n",
       "      <th>price</th>\n",
       "      <th>qty_ordered</th>\n",
       "      <th>grand_total</th>\n",
       "      <th>increment_id</th>\n",
       "      <th>product_category</th>\n",
       "      <th>sales_commission_code</th>\n",
       "      <th>discount_amount</th>\n",
       "      <th>payment_method</th>\n",
       "      <th>BI Status</th>\n",
       "      <th>market_value</th>\n",
       "      <th>Customer Since</th>\n",
       "      <th>Customer ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>211133</td>\n",
       "      <td>canceled</td>\n",
       "      <td>2016-07-01</td>\n",
       "      <td>kcc_Buy 2 Frey Air Freshener &amp; Get 1 Kasual Bo...</td>\n",
       "      <td>240.0</td>\n",
       "      <td>1</td>\n",
       "      <td>240.0</td>\n",
       "      <td>100147444</td>\n",
       "      <td>Beauty &amp; Grooming</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Cash_on_delivery</td>\n",
       "      <td>Gross</td>\n",
       "      <td>240</td>\n",
       "      <td>2016-07-01</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>211134</td>\n",
       "      <td>canceled</td>\n",
       "      <td>2016-07-01</td>\n",
       "      <td>Ego_UP0017-999-MR0</td>\n",
       "      <td>2450.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2450.0</td>\n",
       "      <td>100147445</td>\n",
       "      <td>Women's Fashion</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Cash_on_delivery</td>\n",
       "      <td>Gross</td>\n",
       "      <td>2450</td>\n",
       "      <td>2016-07-01</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>211135</td>\n",
       "      <td>completed</td>\n",
       "      <td>2016-07-01</td>\n",
       "      <td>kcc_krone deal</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1</td>\n",
       "      <td>60.0</td>\n",
       "      <td>100147446</td>\n",
       "      <td>Beauty &amp; Grooming</td>\n",
       "      <td>R-FSD-52352</td>\n",
       "      <td>300.0</td>\n",
       "      <td>Cash_on_delivery</td>\n",
       "      <td>Net</td>\n",
       "      <td>360</td>\n",
       "      <td>2016-07-01</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>211136</td>\n",
       "      <td>refund</td>\n",
       "      <td>2016-07-01</td>\n",
       "      <td>BK7010400AG</td>\n",
       "      <td>555.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1110.0</td>\n",
       "      <td>100147447</td>\n",
       "      <td>Soghaat</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Cash_on_delivery</td>\n",
       "      <td>Valid</td>\n",
       "      <td>1110</td>\n",
       "      <td>2016-07-01</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>211137</td>\n",
       "      <td>canceled</td>\n",
       "      <td>2016-07-01</td>\n",
       "      <td>UK_Namkino All In One 200 Gms</td>\n",
       "      <td>80.0</td>\n",
       "      <td>1</td>\n",
       "      <td>80.0</td>\n",
       "      <td>100147448</td>\n",
       "      <td>Soghaat</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Cash_on_delivery</td>\n",
       "      <td>Gross</td>\n",
       "      <td>80</td>\n",
       "      <td>2016-07-01</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item_id order_status  created_at  \\\n",
       "0   211133     canceled  2016-07-01   \n",
       "1   211134     canceled  2016-07-01   \n",
       "2   211135    completed  2016-07-01   \n",
       "3   211136       refund  2016-07-01   \n",
       "4   211137     canceled  2016-07-01   \n",
       "\n",
       "                                  stock_keeping_unit   price  qty_ordered  \\\n",
       "0  kcc_Buy 2 Frey Air Freshener & Get 1 Kasual Bo...   240.0            1   \n",
       "1                                 Ego_UP0017-999-MR0  2450.0            1   \n",
       "2                                     kcc_krone deal   360.0            1   \n",
       "3                                        BK7010400AG   555.0            2   \n",
       "4                      UK_Namkino All In One 200 Gms    80.0            1   \n",
       "\n",
       "   grand_total  increment_id   product_category sales_commission_code  \\\n",
       "0        240.0     100147444  Beauty & Grooming               Unknown   \n",
       "1       2450.0     100147445    Women's Fashion               Unknown   \n",
       "2         60.0     100147446  Beauty & Grooming           R-FSD-52352   \n",
       "3       1110.0     100147447            Soghaat               Unknown   \n",
       "4         80.0     100147448            Soghaat               Unknown   \n",
       "\n",
       "   discount_amount    payment_method BI Status  market_value Customer Since  \\\n",
       "0              0.0  Cash_on_delivery     Gross           240     2016-07-01   \n",
       "1              0.0  Cash_on_delivery     Gross          2450     2016-07-01   \n",
       "2            300.0  Cash_on_delivery       Net           360     2016-07-01   \n",
       "3              0.0  Cash_on_delivery     Valid          1110     2016-07-01   \n",
       "4              0.0  Cash_on_delivery     Gross            80     2016-07-01   \n",
       "\n",
       "   Customer ID  \n",
       "0            2  \n",
       "1            3  \n",
       "2            4  \n",
       "3            5  \n",
       "4            6  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"./sample_data.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x11574a680>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Initialize Dash app\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "# Layout\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"E-Commerce Dashboard\", style={\"textAlign\": \"center\"}),\n",
    "\n",
    "    # Dropdown for selecting chart type\n",
    "    html.Div([\n",
    "        html.Label(\"Select Chart Type:\"),\n",
    "        dcc.Dropdown(\n",
    "            id=\"chart-type\",\n",
    "            options=[\n",
    "                {\"label\": \"Order Status Distribution\", \"value\": \"status\"},\n",
    "                {\"label\": \"Sales by Category\", \"value\": \"category\"},\n",
    "                {\"label\": \"Payment Method Distribution\", \"value\": \"payment\"},\n",
    "            ],\n",
    "            value=\"status\",\n",
    "        ),\n",
    "    ], style={\"width\": \"50%\", \"margin\": \"0 auto\"}),\n",
    "\n",
    "    # Graph output\n",
    "    dcc.Graph(id=\"chart-output\"),\n",
    "])\n",
    "\n",
    "# Callback for updating chart\n",
    "@app.callback(\n",
    "    Output(\"chart-output\", \"figure\"),\n",
    "    Input(\"chart-type\", \"value\")\n",
    ")\n",
    "def update_chart(chart_type):\n",
    "    if chart_type == \"status\":\n",
    "        fig = px.pie(\n",
    "            df, names=\"order_status\", title=\"Order Status Distribution\"\n",
    "        )\n",
    "    elif chart_type == \"category\":\n",
    "        fig = px.bar(\n",
    "            df.groupby(\"product_category\")[[\"grand_total\"]].sum().reset_index(),\n",
    "            x=\"product_category\",\n",
    "            y=\"grand_total\",\n",
    "            title=\"Sales by Category\",\n",
    "        )\n",
    "    elif chart_type == \"payment\":\n",
    "        fig = px.pie(\n",
    "            df, names=\"payment_method\", title=\"Payment Method Distribution\"\n",
    "        )\n",
    "    else:\n",
    "        fig = px.scatter()\n",
    "\n",
    "    return fig\n",
    "\n",
    "# Run server\n",
    "if __name__ == \"__main__\":\n",
    "    app.run_server(debug=True)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
 # Add a newline between files
File: utils.py
import dash_bootstrap_components as dbc
from dash import html
# Custom color palette
COLORS = {
    'primary': '#2C3E50',
    'secondary': '#18BC9C',
    'background': '#F8F9FA',
    'text': '#2C3E50',
    'chart_colors': ['#18BC9C', '#3498DB', '#E74C3C', '#F39C12', '#9B59B6']
}


def generate_metric_card(id, label, icon):
    return dbc.Card(
        dbc.CardBody([
            html.Div([  # This is now correct
                html.I(className=f"fas {icon} fa-2x me-2",
                       style={'color': COLORS['secondary']}),
                html.H5(label, className="card-title mb-0")
            ], className="d-flex align-items-center mb-3"),
            html.Div(id=id, className="card-text",
                     style={"fontSize": "24px", "fontWeight": "bold", "color": COLORS['primary']}),
        ]),
        className="shadow-sm h-100",
        style={"backgroundColor": "white"}
    )
 # Add a newline between files
